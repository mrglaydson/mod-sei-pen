# Generated by Selenium IDE
import pytest
import os
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class Test1400ArquivamentoUnidadesNaoMapeadas():
  def setup_method(self, method):
    if ("LOCAL" == os.environ["SELENIUMTEST_MODALIDADE"]):
        self.driver = webdriver.Chrome()
    else:
        self.driver = webdriver.Remote(command_executor=os.environ["SELENIUMTEST_SELENIUMHOST_URL"], desired_capabilities=DesiredCapabilities.CHROME)

    if ((not 'maximizar_screen' in os.environ) or os.environ['maximizar_screen'] == 'true'):
        self.driver.maximize_window()

    self.driver.implicitly_wait(5)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
      #time.sleep(round(timeout / 1000))
      wh_now = self.driver.window_handles
      wh_then = self.vars["window_handles"]
      if len(wh_now) > len(wh_then):
        return set(wh_now).difference(set(wh_then)).pop()
  
  def test_cadastrarProcessosFlood5(self):
    self.driver.get(os.environ["SELENIUMTEST_SISTEMA_URL"]+"/sip/login.php?sigla_orgao_sistema="+os.environ["SELENIUMTEST_SISTEMA_ORGAO"]+"&sigla_sistema=SEI&infra_url=L3NlaS8=")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.ID, "txtUsuario")))
    self.driver.find_element(By.ID, "txtUsuario").click()
    self.driver.find_element(By.ID, "txtUsuario").send_keys("teste")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.ID, "pwdSenha")))
    self.driver.find_element(By.ID, "pwdSenha").click()
    self.driver.find_element(By.ID, "pwdSenha").send_keys("teste")
    self.driver.find_element(By.ID, "Acessar").click()
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".d-none #lnkInfraUnidade")))
    self.driver.find_element(By.CSS_SELECTOR, ".d-none #lnkInfraUnidade").click()
    self.driver.find_element(By.XPATH, "//td[contains(.,\'Unidade de Testes 1.1\')]").click()
    self.driver.find_element(By.CSS_SELECTOR, ".d-none #lnkInfraUnidade").click()
    self.driver.find_element(By.XPATH, "//td[contains(.,\'Unidade de Testes 1.2\')]").click()
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "Iniciar Processo")))
    self.driver.find_element(By.LINK_TEXT, "Iniciar Processo").click()
    self.vars["error"] = len(self.driver.find_elements(By.XPATH, "//a[contains(text(), \'Acesso à Informação: Demanda do e-SIC\')]"))
    if self.driver.execute_script("return (arguments[0]==0)", self.vars["error"]):
      self.driver.find_element(By.ID, "imgExibirTiposProcedimento").click()
    self.driver.find_element(By.LINK_TEXT, "Acesso à Informação: Demanda do e-SIC").click()
    WebDriverWait(self.driver, 30).until(expected_conditions.element_to_be_clickable((By.ID, "txtDescricao")))
    self.driver.find_element(By.ID, "txtDescricao").send_keys("teste arquivo")
    self.driver.find_element(By.ID, "lblPublico").click()
    self.driver.find_element(By.CSS_SELECTOR, "#divInfraBarraComandosInferior > #btnSalvar > .infraTeclaAtalho").click()
    self.driver.switch_to.frame(0)
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//a[contains(., \"9999\")]")))
    self.driver.find_element(By.XPATH, "//a[contains(., \"9999\")]").click()
    time.sleep(2)
    self.driver.switch_to.default_content()
    self.driver.switch_to.frame(1)
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//*[contains(@title,\'Incluir Documento\')]")))
    self.driver.find_element(By.XPATH, "//*[contains(@title,\'Incluir Documento\')]").click()
    self.vars["error"] = len(self.driver.find_elements(By.XPATH, "//a[contains(text(), \'Despacho\')]"))
    if self.driver.execute_script("return (arguments[0]==0)", self.vars["error"]):
      self.driver.find_element(By.ID, "imgExibirSeries").click()
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "Despacho")))
    self.driver.find_element(By.LINK_TEXT, "Despacho").click()
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.ID, "lblPublico")))
    self.driver.find_element(By.ID, "lblPublico").click()
    self.vars["window_handles"] = self.driver.window_handles
    self.driver.find_element(By.ID, "btnSalvar").click()
    self.vars["win3408"] = self.wait_for_window(30)
    self.vars["root"] = self.driver.current_window_handle
    self.driver.switch_to.window(self.vars["win3408"])
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])
    self.driver.switch_to.frame(0)
    self.driver.switch_to.default_content()
    self.driver.switch_to.frame(1)
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//img[@alt=\'Concluir Processo\']")))
    self.driver.find_element(By.XPATH, "//img[@alt=\'Concluir Processo\']").click()
    time.sleep(2)
    self.driver.switch_to.default_content()
    self.driver.find_element(By.XPATH, "//div[@id='divInfraBarraSistemaPadraoD' ]/div/a[@id='lnkInfraMenuSistema']|//div[@id='divInfraBarraSistemaPadrao']/div/div/button").click()
    self.driver.find_element(By.LINK_TEXT, "Pendências de Arquivamento").click()
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".infraCaption")))
    self.driver.find_element(By.CSS_SELECTOR, ".infraCaption").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".infraCaption").text == "Lista de Pendências de Arquivamento (1 registro):"
    self.driver.find_element(By.XPATH, "//div[@id=\'divInfraAreaTabela\']/table/tbody/tr[2]/td[8]/a[2]/img").click()
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.ID, "selJustificativa")))
    dropdown = self.driver.find_element(By.ID, "selJustificativa")
    dropdown.find_element(By.XPATH, "//option[. = 'Justificativa de Arquivamento 01']").click()
    self.driver.find_element(By.ID, "selJustificativa").click()
    self.driver.find_element(By.XPATH, "//input[@id='chkSinLegado']/..").click()
    self.driver.find_element(By.ID, "txtDataArquivamento").click()
    self.driver.find_element(By.ID, "txtDataArquivamento").send_keys("01/01/2000")
    self.driver.find_element(By.ID, "divDataArquivamento").click()
    dropdown = self.driver.find_element(By.ID, "selCargoFuncao")
    dropdown.find_element(By.XPATH, "//option[. = 'Ouvidor']").click()
    self.driver.find_element(By.ID, "selCargoFuncao").click()
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.ID, "pwdSenha")))
    self.driver.find_element(By.ID, "pwdSenha").click()
    self.driver.find_element(By.ID, "pwdSenha").send_keys("teste")
    self.driver.find_element(By.ID, "sbmSalvar").click()
    self.driver.switch_to.alert.accept()
    time.sleep(2)
    self.driver.switch_to.alert.accept()
    self.driver.find_element(By.ID, "divInfraBarraLocalizacao").click()
    assert self.driver.find_element(By.ID, "divInfraBarraLocalizacao").text == "Arquivar Processo"
  
