# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class Test0310SEIGDPendenciasArq():
  def setup_method(self, method):
    self.driver = webdriver.Remote(command_executor='http://seleniumhub:4444/wd/hub', desired_capabilities=DesiredCapabilities.CHROME)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_0310ConcluirArquivar(self):
    self.driver.get("http://sei.gd.nuvem.gov.br/sip/login.php?sigla_orgao_sistema=ME&sigla_sistema=SEI&infra_url=L3NlaS8=")
    self.driver.find_element(By.ID, "txtUsuario").send_keys("teste")
    self.driver.find_element(By.ID, "pwdSenha").send_keys("teste")
    self.driver.find_element(By.ID, "sbmLogin").click()
    self.driver.find_element(By.LINK_TEXT, "Controle de Processos").click()
    self.driver.find_element(By.ID, "imgGeradosCheck").click()
    self.driver.find_element(By.CSS_SELECTOR, ".botaoSEI:nth-child(6) > .infraCorBarraSistema").click()
    self.driver.find_element(By.LINK_TEXT, "Pendências de Arquivamento").click()
    self.driver.find_element(By.ID, "imgInfraCheck").click()
    self.driver.find_element(By.ID, "sbmArquivar").click()
    dropdown = self.driver.find_element(By.ID, "selJustificativa")
    dropdown.find_element(By.XPATH, "//option[. = 'Justificativa de Arquivamento 02']").click()
    self.driver.find_element(By.ID, "selJustificativa").click()
    dropdown = self.driver.find_element(By.ID, "selCargoFuncao")
    dropdown.find_element(By.XPATH, "//option[. = 'Assessor(a)']").click()
    self.driver.find_element(By.ID, "selCargoFuncao").click()
    self.driver.find_element(By.ID, "pwdSenha").click()
    self.driver.find_element(By.ID, "pwdSenha").send_keys("teste")
    self.driver.find_element(By.ID, "sbmSalvar").click()
    WebDriverWait(self.driver, 180000).until(expected_conditions.visibility_of_element_located((By.XPATH, "//*[@id=\"divInfraAreaTabela\"]/table/caption")))
    WebDriverWait(self.driver, 180000).until(expected_conditions.visibility_of_element_located((By.ID, "divInfraBarraLocalizacao")))
    assert self.driver.find_element(By.ID, "divInfraBarraLocalizacao").text == "Pendências de Arquivamento"
  
  def test_0320VerificarPrazosUnidadeTeste(self):
    self.driver.get("http://sei.gd.nuvem.gov.br/sip/login.php?sigla_orgao_sistema=ME&sigla_sistema=SEI&infra_url=L3NlaS8=")
    self.driver.find_element(By.ID, "txtUsuario").send_keys("teste")
    self.driver.find_element(By.ID, "pwdSenha").send_keys("teste")
    self.driver.find_element(By.ID, "sbmLogin").click()
    self.driver.find_element(By.LINK_TEXT, "Arquivo da Unidade").click()
    WebDriverWait(self.driver, 30000).until(expected_conditions.visibility_of_element_located((By.XPATH, "//td[contains(.,\'2 anos\')]")))
    assert self.driver.find_element(By.XPATH, "//td[contains(.,\'2 anos\')]").text == "2 anos, 0 meses e 0 dias."
    assert self.driver.find_element(By.XPATH, "//td[contains(.,\'4 anos\')]").text == "4 anos, 0 meses e 0 dias."
  
  def test_0330VerificarPrazosUnidadeArquivo(self):
    self.driver.get("http://sei.gd.nuvem.gov.br/sip/login.php?sigla_orgao_sistema=ME&sigla_sistema=SEI&infra_url=L3NlaS8=")
    self.driver.find_element(By.ID, "txtUsuario").send_keys("arquivista01")
    self.driver.find_element(By.ID, "pwdSenha").send_keys("arquivista01")
    self.driver.find_element(By.ID, "sbmLogin").click()
    self.driver.find_element(By.LINK_TEXT, "Arquivo da Unidade").click()
    WebDriverWait(self.driver, 30000).until(expected_conditions.visibility_of_element_located((By.XPATH, "//td[contains(.,\'2 anos\')]")))
    elements = self.driver.find_elements(By.XPATH, "//td[contains(.,\'0 anos, 11 meses\')]")
    assert len(elements) > 0
    elements = self.driver.find_elements(By.XPATH, "//td[contains(.,\'2 anos, 11 meses\')]")
    assert len(elements) > 0
    elements = self.driver.find_elements(By.XPATH, "//td[contains(.,\'10 anos\')]")
    assert len(elements) > 0
  
